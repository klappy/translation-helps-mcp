/**
 * Test UI Endpoint
 * GET /api/test-ui
 *
 * Serves an HTML interface for testing the Translation Helps API
 * Features both individual testing and comprehensive bulk testing
 */

import { Handler } from "@netlify/functions";

const HTML = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Translation Helps MCP - Epic Test Suite</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --secondary: #f59e0b;
            --success: #10b981;
            --error: #ef4444;
            --warning: #f59e0b;
            --background: #0f172a;
            --surface: #1e293b;
            --surface-light: #334155;
            --text: #f8fafc;
            --text-muted: #94a3b8;
            --border: #475569;
            --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
            --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--background) 0%, #1e1b4b 100%);
            color: var(--text);
            line-height: 1.6;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .header {
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: -50px;
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
            height: 200px;
            background: radial-gradient(circle, var(--primary) 0%, transparent 70%);
            opacity: 0.1;
            border-radius: 50%;
            z-index: -1;
        }
        
        h1 {
            font-size: 3.5rem;
            font-weight: 800;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 0.5rem;
            letter-spacing: -0.02em;
        }
        
        .subtitle {
            font-size: 1.25rem;
            color: var(--text-muted);
            margin-bottom: 1rem;
        }
        
        .mode-toggle {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .mode-btn {
            background: var(--surface);
            color: var(--text-muted);
            border: 2px solid var(--border);
            padding: 0.75rem 1.5rem;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .mode-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s;
        }
        
        .mode-btn:hover::before {
            left: 100%;
        }
        
        .mode-btn.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
            box-shadow: var(--shadow);
        }
        
        .card {
            background: var(--surface);
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }
        
        .card h2 {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .card h2::before {
            content: '🚀';
            font-size: 1.5rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text);
            font-size: 0.95rem;
        }
        
        input[type="text"],
        select,
        textarea {
            width: 100%;
            padding: 1rem;
            background: var(--surface-light);
            border: 2px solid var(--border);
            border-radius: 12px;
            font-size: 1rem;
            color: var(--text);
            transition: all 0.3s ease;
        }
        
        input[type="text"]:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }
        
        .checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 0.5rem;
        }
        
        .checkbox-label {
            display: flex;
            align-items: center;
            padding: 1rem;
            background: var(--surface-light);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .checkbox-label:hover {
            background: var(--border);
            transform: translateY(-1px);
        }
        
        .checkbox-label input[type="checkbox"]:checked + span {
            color: var(--primary);
            font-weight: 600;
        }
        
        input[type="checkbox"] {
            margin-right: 0.75rem;
            transform: scale(1.2);
        }
        
        button {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }
        
        button:hover::before {
            left: 100%;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }
        
        button:disabled {
            background: var(--border);
            cursor: not-allowed;
            transform: none;
        }
        
        .loading {
            display: none;
            margin-top: 1rem;
            text-align: center;
            color: var(--primary);
        }
        
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid var(--border);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
            margin-right: 0.5rem;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .error {
            background: rgba(239, 68, 68, 0.1);
            color: var(--error);
            padding: 1rem;
            border-radius: 12px;
            margin-top: 1rem;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }
        
        .results {
            display: none;
            margin-top: 2rem;
        }
        
        .resource-section {
            background: var(--surface-light);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border);
        }
        
        .resource-section h3 {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .scripture-text {
            font-size: 1.1rem;
            line-height: 1.8;
            color: var(--text);
            padding: 1.5rem;
            background: var(--surface);
            border-radius: 12px;
            border-left: 4px solid var(--primary);
            font-style: italic;
        }
        
        .note-item,
        .question-item,
        .word-item {
            background: var(--surface);
            padding: 1rem;
            border-radius: 12px;
            margin-bottom: 0.75rem;
            border-left: 4px solid var(--border);
            transition: all 0.3s ease;
        }
        
        .note-item:hover,
        .question-item:hover,
        .word-item:hover {
            transform: translateX(4px);
            border-left-color: var(--primary);
        }
        
        .note-item strong,
        .question-item strong,
        .word-item strong {
            color: var(--primary);
        }
        
        pre {
            background: var(--background);
            color: var(--text);
            padding: 1.5rem;
            border-radius: 12px;
            overflow-x: auto;
            font-size: 0.9rem;
            border: 1px solid var(--border);
        }

        .stats {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        .stat {
            background: var(--surface-light);
            padding: 0.75rem 1.25rem;
            border-radius: 12px;
            font-size: 0.9rem;
            border: 1px solid var(--border);
        }

        .endpoint-test {
            margin-bottom: 1rem;
            padding: 1rem;
            background: var(--surface-light);
            border-radius: 12px;
            border: 1px solid var(--border);
        }

        .endpoint-status {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }

        .status-pending { background: var(--warning); }
        .status-success { background: var(--success); }
        .status-error { background: var(--error); }
        
        .timing-info {
            margin: 1.5rem 0;
            padding: 1.5rem;
            background: var(--surface-light);
            border-radius: 12px;
            border: 1px solid var(--border);
        }
        
        .timing-info h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text);
        }
        
        .timing-grid {
            display: grid;
            gap: 0.75rem;
        }
        
        .timing-item {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .timing-item.success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #10b981;
        }
        
        .timing-item.error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #ef4444;
        }
        
        .timing-item strong {
            font-weight: 600;
        }
        
        /* Bulk Testing Styles */
        .bulk-test-section {
            display: none;
        }
        
        .bulk-test-section.active {
            display: block;
        }
        
        .test-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .test-card {
            background: var(--surface-light);
            border-radius: 12px;
            padding: 1rem;
            border: 1px solid var(--border);
            transition: all 0.3s ease;
        }
        
        .test-card:hover {
            transform: translateY(-2px);
            border-color: var(--primary);
        }
        
        .test-card h4 {
            color: var(--primary);
            margin-bottom: 0.5rem;
            font-size: 1rem;
        }
        
        .test-card p {
            color: var(--text-muted);
            font-size: 0.9rem;
        }
        
        .bulk-results {
            max-height: 600px;
            overflow-y: auto;
            background: var(--surface);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid var(--border);
        }
        
        .bulk-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .summary-card {
            background: var(--surface-light);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            border: 1px solid var(--border);
        }
        
        .summary-card h3 {
            font-size: 2rem;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }
        
        .summary-card p {
            color: var(--text-muted);
            font-size: 0.9rem;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--border);
            border-radius: 4px;
            overflow: hidden;
            margin: 1rem 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            transition: width 0.3s ease;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            h1 {
                font-size: 2.5rem;
            }
            
            .checkbox-group {
                grid-template-columns: 1fr;
            }
            
            .test-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Translation Helps MCP</h1>
            <p class="subtitle">Epic Test Suite - 2025 Edition</p>
        </div>
        
        <div class="mode-toggle">
            <button class="mode-btn active" onclick="switchMode('individual')">🎯 Individual Testing</button>
            <button class="mode-btn" onclick="switchMode('bulk')">🚀 Bulk Testing Suite</button>
        </div>
        
        <!-- Individual Testing Section -->
        <div id="individual-section">
            <div class="card">
                <h2>Endpoint Health Check</h2>
                <div id="endpointTests"></div>
            </div>

            <div class="card">
                <h2>Fetch Resources</h2>
                <form id="fetchForm">
                    <div class="form-group">
                        <label for="reference">Bible Reference</label>
                        <input type="text" id="reference" name="reference" 
                               placeholder="e.g., Titus 1:1 or Tit 1:1-5 or Genesis 1-3" 
                               value="Titus 1:1">
                    </div>
                    
                    <div class="form-group">
                        <label for="language">Language Code</label>
                        <input type="text" id="language" name="language" 
                               placeholder="e.g., en, fr, es" 
                               value="en">
                    </div>
                    
                    <div class="form-group">
                        <label for="organization">Organization</label>
                        <select id="organization" name="organization">
                            <option value="unfoldingWord" selected>unfoldingWord</option>
                            <option value="Door43-Catalog">Door43-Catalog</option>
                            <option value="STR">STR (Spanish)</option>
                            <option value="ru_gl">ru_gl (Russian)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Resource Types</label>
                        <div class="checkbox-group">
                            <label class="checkbox-label">
                                <input type="checkbox" name="resources" value="scripture" checked>
                                <span>📖 Scripture Text</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="resources" value="notes" checked>
                                <span>📝 Translation Notes</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="resources" value="questions" checked>
                                <span>❓ Translation Questions</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="resources" value="words" checked>
                                <span>🔤 Translation Words</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="resources" value="links" checked>
                                <span>🔗 Translation Word Links</span>
                            </label>
                        </div>
                    </div>
                    
                    <button type="submit">🚀 Fetch Resources</button>
                    <div class="loading">
                        <span class="spinner"></span>Loading...
                    </div>
                </form>
            </div>
            
            <div id="results" class="results" style="min-height: 100px;"></div>
        </div>
        
        <!-- Bulk Testing Section -->
        <div id="bulk-section" class="bulk-test-section">
            <div class="card">
                <h2>Comprehensive Test Suite</h2>
                <p style="color: var(--text-muted); margin-bottom: 1.5rem;">
                    Run 30+ test cases across different reference types, languages, and organizations. 
                    Perfect for validating edge cases and performance.
                </p>
                
                <div class="form-group">
                    <label for="testConfig">Test Configuration</label>
                    <select id="testConfig">
                        <option value="quick">⚡ Quick Test (10 cases)</option>
                        <option value="standard" selected>🎯 Standard Test (30 cases)</option>
                        <option value="comprehensive">🚀 Comprehensive Test (50+ cases)</option>
                        <option value="custom">⚙️ Custom Test Cases</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="customTests" style="display: none;">Custom Test Cases (JSON)</label>
                    <textarea id="customTests" style="display: none; height: 200px;" 
                              placeholder='[{"reference": "John 3:16", "language": "en", "organization": "unfoldingWord"}]'></textarea>
                </div>
                
                <button onclick="runBulkTests()">🚀 Run Bulk Tests</button>
                <div id="bulkLoading" class="loading" style="display: none;">
                    <span class="spinner"></span>Running comprehensive tests...
                </div>
            </div>
            
            <div id="bulkResults" class="bulk-results" style="display: none;">
                <div id="bulkSummary" class="bulk-summary"></div>
                <div id="bulkProgress" class="progress-bar">
                    <div id="progressFill" class="progress-fill" style="width: 0%"></div>
                </div>
                <div id="bulkDetails"></div>
            </div>
        </div>
    </div>

    <script>
        // Test data for bulk testing
        const standardTests = [
            // Single verses
            { reference: "John 3:16", language: "en", organization: "unfoldingWord" },
            { reference: "Genesis 1:1", language: "en", organization: "unfoldingWord" },
            { reference: "Psalm 23:1", language: "en", organization: "unfoldingWord" },
            { reference: "Matthew 5:1", language: "en", organization: "unfoldingWord" },
            { reference: "Romans 8:28", language: "en", organization: "unfoldingWord" },
            { reference: "1 Corinthians 13:4", language: "en", organization: "unfoldingWord" },
            { reference: "Revelation 21:1", language: "en", organization: "unfoldingWord" },
            { reference: "Titus 1:1", language: "en", organization: "unfoldingWord" },
            { reference: "Hebrews 11:1", language: "en", organization: "unfoldingWord" },
            { reference: "James 1:1", language: "en", organization: "unfoldingWord" },
            
            // Verse ranges
            { reference: "Matthew 5:1-12", language: "en", organization: "unfoldingWord" },
            { reference: "1 Corinthians 13:4-7", language: "en", organization: "unfoldingWord" },
            { reference: "Psalm 23:1-6", language: "en", organization: "unfoldingWord" },
            { reference: "John 3:16-17", language: "en", organization: "unfoldingWord" },
            { reference: "Romans 8:28-30", language: "en", organization: "unfoldingWord" },
            
            // Chapters
            { reference: "Genesis 1", language: "en", organization: "unfoldingWord" },
            { reference: "Psalm 23", language: "en", organization: "unfoldingWord" },
            { reference: "Matthew 5", language: "en", organization: "unfoldingWord" },
            { reference: "John 3", language: "en", organization: "unfoldingWord" },
            { reference: "Romans 8", language: "en", organization: "unfoldingWord" },
            
            // Different languages
            { reference: "John 3:16", language: "es", organization: "STR" },
            { reference: "Genesis 1:1", language: "ru", organization: "ru_gl" },
            { reference: "Psalm 23:1", language: "fr", organization: "unfoldingWord" },
            
            // Edge cases
            { reference: "1 John 1:1", language: "en", organization: "unfoldingWord" },
            { reference: "2 Peter 1:1", language: "en", organization: "unfoldingWord" },
            { reference: "3 John 1:1", language: "en", organization: "unfoldingWord" },
            { reference: "1 Samuel 1:1", language: "en", organization: "unfoldingWord" },
            { reference: "2 Kings 1:1", language: "en", organization: "unfoldingWord" }
        ];

        const comprehensiveTests = [
            // All standard cases plus more edge cases
            ...standardTests,
            
            // More verse ranges
            { reference: "Genesis 1:1-31", language: "en", organization: "unfoldingWord" },
            { reference: "Exodus 20:1-17", language: "en", organization: "unfoldingWord" },
            { reference: "Psalm 119:1-8", language: "en", organization: "unfoldingWord" },
            { reference: "Isaiah 53:1-12", language: "en", organization: "unfoldingWord" },
            { reference: "Daniel 3:1-30", language: "en", organization: "unfoldingWord" },
            
            // More chapters
            { reference: "Exodus 20", language: "en", organization: "unfoldingWord" },
            { reference: "Isaiah 53", language: "en", organization: "unfoldingWord" },
            { reference: "Daniel 3", language: "en", organization: "unfoldingWord" },
            { reference: "Acts 2", language: "en", organization: "unfoldingWord" },
            { reference: "Ephesians 6", language: "en", organization: "unfoldingWord" },
            
            // More languages and organizations
            { reference: "John 3:16", language: "de", organization: "unfoldingWord" },
            { reference: "Genesis 1:1", language: "it", organization: "unfoldingWord" },
            { reference: "Psalm 23:1", language: "pt", organization: "unfoldingWord" },
            { reference: "Matthew 5:1", language: "nl", organization: "unfoldingWord" },
            { reference: "Romans 8:28", language: "pl", organization: "unfoldingWord" },
            
            // Complex references
            { reference: "1 Corinthians 15:1-58", language: "en", organization: "unfoldingWord" },
            { reference: "Hebrews 11:1-40", language: "en", organization: "unfoldingWord" },
            { reference: "Revelation 21:1-27", language: "en", organization: "unfoldingWord" },
            { reference: "Psalm 119:1-176", language: "en", organization: "unfoldingWord" },
            { reference: "Isaiah 40:1-31", language: "en", organization: "unfoldingWord" }
        ];

        const testCases = {
            quick: [
                { reference: "John 3:16", language: "en", organization: "unfoldingWord" },
                { reference: "Genesis 1:1", language: "en", organization: "unfoldingWord" },
                { reference: "Psalm 23:1", language: "en", organization: "unfoldingWord" },
                { reference: "Matthew 5:1-12", language: "en", organization: "unfoldingWord" },
                { reference: "Romans 8:28", language: "en", organization: "unfoldingWord" },
                { reference: "1 Corinthians 13:4-7", language: "en", organization: "unfoldingWord" },
                { reference: "Revelation 21:1", language: "en", organization: "unfoldingWord" },
                { reference: "Titus 1:1", language: "en", organization: "unfoldingWord" },
                { reference: "Hebrews 11:1", language: "en", organization: "unfoldingWord" },
                { reference: "James 1:1", language: "en", organization: "unfoldingWord" }
            ],
            standard: standardTests,
            comprehensive: comprehensiveTests
        };

        // Mode switching
        function switchMode(mode) {
            const individualSection = document.getElementById('individual-section');
            const bulkSection = document.getElementById('bulk-section');
            const modeBtns = document.querySelectorAll('.mode-btn');
            
            modeBtns.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            if (mode === 'individual') {
                individualSection.style.display = 'block';
                bulkSection.classList.remove('active');
            } else {
                individualSection.style.display = 'none';
                bulkSection.classList.add('active');
            }
        }

        // Test individual endpoints
        async function testEndpoints() {
            const endpoints = [
                { name: 'Scripture', url: '/api/fetch-scripture?reference=Titus 1:1' },
                { name: 'Translation Notes', url: '/api/fetch-translation-notes?reference=Titus 1:1' },
                { name: 'Translation Questions', url: '/api/fetch-translation-questions?reference=Titus 1:1' },
                { name: 'Translation Words', url: '/api/fetch-translation-words?reference=Titus 1:1' },
                { name: 'Translation Word Links', url: '/api/fetch-translation-word-links?reference=Titus 1:1' }
            ];

            const container = document.getElementById('endpointTests');
            container.innerHTML = '';
            
            console.log('Testing endpoints:', endpoints);

            // Create all test elements first
            const testElements = endpoints.map(endpoint => {
                const div = document.createElement('div');
                div.className = 'endpoint-test';
                div.innerHTML = \`
                    <span class="endpoint-status status-pending"></span>
                    <strong>\${endpoint.name}:</strong> Testing...
                \`;
                container.appendChild(div);
                return { endpoint, div };
            });

            // Run all tests in parallel
            const testPromises = testElements.map(async ({ endpoint, div }) => {
                try {
                    console.log(\`Testing \${endpoint.name} at \${endpoint.url}\`);
                    const startTime = Date.now();
                    const response = await fetch(endpoint.url);
                    const data = await response.json();
                    const endTime = Date.now();
                    const responseTime = endTime - startTime;
                    const status = div.querySelector('.endpoint-status');
                    
                    if (response.ok) {
                        status.className = 'endpoint-status status-success';
                        const serverTime = data.responseTime || 'N/A';
                        div.innerHTML += \` ✓ Working (Client: \${responseTime}ms, Server: \${serverTime}ms)\`;
                        console.log(\`\${endpoint.name} response:\`, data);
                    } else {
                        status.className = 'endpoint-status status-error';
                        div.innerHTML += \` ✗ Error: \${data.error || response.status} (\${responseTime}ms)\`;
                        console.error(\`\${endpoint.name} failed:\`, data);
                    }
                } catch (error) {
                    const status = div.querySelector('.endpoint-status');
                    status.className = 'endpoint-status status-error';
                    div.innerHTML += \` ✗ Network Error: \${error.message}\`;
                    console.error(\`\${endpoint.name} network error:\`, error);
                }
            });

            // Wait for all tests to complete
            await Promise.all(testPromises);
        }

        // Bulk testing functionality
        async function runBulkTests() {
            const testConfig = getTestConfiguration();
            const testCases = generateTestCases(testConfig);
            
            // console.log('Starting bulk test suite...');
            // console.log('Test Configuration:', testConfig);
            // console.log('Total test cases:', testCases.length);
            
            const results = {
                total: testCases.length,
                passed: 0,
                failed: 0,
                errors: [],
                details: [],
                timing: {
                    start: Date.now(),
                    end: null,
                    total: 0
                }
            };

            const progressBar = document.getElementById('bulk-progress');
            const progressText = document.getElementById('bulk-progress-text');
            const resultsDiv = document.getElementById('bulk-results');
            
            progressBar.style.width = '0%';
            progressText.textContent = 'Starting tests...';
            resultsDiv.innerHTML = '<div class="text-center text-gray-400">Running tests...</div>';

            // Debug logging setup
            const debugLogs = [];
            const addDebugLog = (level, message, data = null) => {
                const timestamp = new Date().toISOString();
                const logEntry = {
                    timestamp,
                    level,
                    message,
                    data,
                    testCase: currentTestCase || 'N/A'
                };
                debugLogs.push(logEntry);
                // console.log('[' + timestamp + '] [' + level + '] [' + logEntry.testCase + '] ' + message, data || '');
            };

            let currentTestCase = '';

            for (let i = 0; i < testCases.length; i++) {
                const testCase = testCases[i];
                currentTestCase = testCase.type + '-' + (i + 1);
                
                addDebugLog('INFO', 'Starting test case ' + (i + 1) + '/' + testCases.length, {
                    type: testCase.type,
                    params: testCase.params,
                    expected: testCase.expected
                });

                const progress = ((i + 1) / testCases.length) * 100;
                progressBar.style.width = progress + '%';
                progressText.textContent = 'Running test ' + (i + 1) + ' of ' + testCases.length + '...';

                try {
                    const startTime = Date.now();
                    addDebugLog('DEBUG', 'Making API request', {
                        url: testCase.url,
                        method: testCase.method,
                        body: testCase.body
                    });

                    const response = await fetch(testCase.url, {
                        method: testCase.method,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: testCase.body ? JSON.stringify(testCase.body) : undefined
                    });

                    const clientTime = Date.now() - startTime;
                    addDebugLog('DEBUG', 'Received response', {
                        status: response.status,
                        statusText: response.statusText,
                        clientTime: `${clientTime}ms`,
                        headers: Object.fromEntries(response.headers.entries())
                    });

                    const responseText = await response.text();
                    addDebugLog('DEBUG', 'Response body received', {
                        length: responseText.length,
                        preview: responseText.substring(0, 500) + (responseText.length > 500 ? '...' : '')
                    });

                    let responseData;
                    try {
                        responseData = JSON.parse(responseText);
                        addDebugLog('DEBUG', 'Response parsed successfully', {
                            hasData: !!responseData.data,
                            dataLength: responseData.data ? responseData.data.length : 0,
                            serverTime: responseData.responseTime,
                            totalTime: responseData.responseTime + clientTime
                        });
                    } catch (parseError) {
                        addDebugLog('ERROR', `Failed to parse JSON response`, {
                            error: parseError.message,
                            responseText: responseText.substring(0, 1000)
                        });
                        throw new Error(`Invalid JSON response: ${parseError.message}`);
                    }

                    // Validate response structure
                    if (!response.ok) {
                        addDebugLog('ERROR', `HTTP error response`, {
                            status: response.status,
                            statusText: response.statusText,
                            responseData
                        });
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    if (!responseData || typeof responseData !== 'object') {
                        addDebugLog('ERROR', `Invalid response structure`, {
                            responseData: typeof responseData,
                            actual: responseData
                        });
                        throw new Error('Response is not a valid object');
                    }

                    // Validate expected data structure based on test type
                    const validationResult = validateResponse(testCase.type, responseData, testCase.expected);
                    addDebugLog('DEBUG', `Response validation result`, validationResult);

                    if (!validationResult.valid) {
                        addDebugLog('ERROR', `Response validation failed`, {
                            errors: validationResult.errors,
                            actual: responseData,
                            expected: testCase.expected
                        });
                        throw new Error(`Validation failed: ${validationResult.errors.join(', ')}`);
                    }

                    results.passed++;
                    addDebugLog('SUCCESS', `Test case passed`, {
                        clientTime: `${clientTime}ms`,
                        serverTime: responseData.responseTime,
                        totalTime: responseData.responseTime + clientTime,
                        dataCount: responseData.data ? responseData.data.length : 0
                    });

                    results.details.push({
                        testCase: currentTestCase,
                        type: testCase.type,
                        status: 'passed',
                        clientTime,
                        serverTime: responseData.responseTime,
                        totalTime: responseData.responseTime + clientTime,
                        dataCount: responseData.data ? responseData.data.length : 0,
                        params: testCase.params
                    });

                } catch (error) {
                    results.failed++;
                    addDebugLog('ERROR', `Test case failed`, {
                        error: error.message,
                        stack: error.stack
                    });

                    results.errors.push({
                        testCase: currentTestCase,
                        type: testCase.type,
                        error: error.message,
                        params: testCase.params
                    });

                    results.details.push({
                        testCase: currentTestCase,
                        type: testCase.type,
                        status: 'failed',
                        error: error.message,
                        params: testCase.params
                    });
                }

                // Small delay to prevent overwhelming the server
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            results.timing.end = Date.now();
            results.timing.total = results.timing.end - results.timing.start;

            addDebugLog('INFO', `Bulk test suite completed`, {
                total: results.total,
                passed: results.passed,
                failed: results.failed,
                totalTime: `${results.timing.total}ms`,
                averageTime: `${results.timing.total / results.total}ms`
            });

            // Display results
            displayBulkResults(results);
            
            // Create debug log export
            const debugExport = {
                timestamp: new Date().toISOString(),
                testConfiguration: testConfig,
                results: results,
                logs: debugLogs
            };

            // Add debug export button
            const debugButton = document.createElement('button');
            debugButton.className = 'bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg mt-4';
            debugButton.textContent = '📋 Copy Debug Logs';
            debugButton.onclick = () => {
                const debugText = JSON.stringify(debugExport, null, 2);
                navigator.clipboard.writeText(debugText).then(() => {
                    debugButton.textContent = '✅ Copied!';
                    setTimeout(() => {
                        debugButton.textContent = '📋 Copy Debug Logs';
                    }, 2000);
                });
            };
            resultsDiv.appendChild(debugButton);

            // console.log('Bulk test results:', results);
            // console.log('Full debug logs:', debugLogs);
        }

        // Enhanced response validation
        function validateResponse(testType, responseData, expected) {
            const errors = [];
            
            // Basic structure validation
            if (!responseData.hasOwnProperty('data')) {
                errors.push('Missing "data" property');
            }
            
            if (!responseData.hasOwnProperty('responseTime')) {
                errors.push('Missing "responseTime" property');
            }

            // Type-specific validation
            switch (testType) {
                case 'scripture':
                    if (!Array.isArray(responseData.data)) {
                        errors.push('Scripture data should be an array');
                    } else if (responseData.data.length === 0) {
                        errors.push('Scripture data array is empty');
                    } else {
                        const firstItem = responseData.data[0];
                        if (!firstItem.hasOwnProperty('reference')) {
                            errors.push('Scripture items missing "reference" property');
                        }
                        if (!firstItem.hasOwnProperty('text')) {
                            errors.push('Scripture items missing "text" property');
                        }
                    }
                    break;

                case 'translation-notes':
                    if (!Array.isArray(responseData.data)) {
                        errors.push('Translation notes data should be an array');
                    } else if (responseData.data.length === 0) {
                        errors.push('Translation notes data array is empty');
                    } else {
                        const firstItem = responseData.data[0];
                        if (!firstItem.hasOwnProperty('reference')) {
                            errors.push('Translation notes items missing "reference" property');
                        }
                        if (!firstItem.hasOwnProperty('notes')) {
                            errors.push('Translation notes items missing "notes" property');
                        }
                    }
                    break;

                case 'translation-questions':
                    if (!Array.isArray(responseData.data)) {
                        errors.push('Translation questions data should be an array');
                    } else if (responseData.data.length === 0) {
                        errors.push('Translation questions data array is empty');
                    } else {
                        const firstItem = responseData.data[0];
                        if (!firstItem.hasOwnProperty('reference')) {
                            errors.push('Translation questions items missing "reference" property');
                        }
                        if (!firstItem.hasOwnProperty('questions')) {
                            errors.push('Translation questions items missing "questions" property');
                        }
                    }
                    break;

                case 'translation-words':
                    if (!Array.isArray(responseData.data)) {
                        errors.push('Translation words data should be an array');
                    } else if (responseData.data.length === 0) {
                        errors.push('Translation words data array is empty');
                    } else {
                        const firstItem = responseData.data[0];
                        if (!firstItem.hasOwnProperty('term')) {
                            errors.push('Translation words items missing "term" property');
                        }
                        if (!firstItem.hasOwnProperty('definition')) {
                            errors.push('Translation words items missing "definition" property');
                        }
                    }
                    break;

                case 'translation-word-links':
                    if (!Array.isArray(responseData.data)) {
                        errors.push('Translation word links data should be an array');
                    } else if (responseData.data.length === 0) {
                        errors.push('Translation word links data array is empty');
                    } else {
                        const firstItem = responseData.data[0];
                        if (!firstItem.hasOwnProperty('reference')) {
                            errors.push('Translation word links items missing "reference" property');
                        }
                        if (!firstItem.hasOwnProperty('links')) {
                            errors.push('Translation word links items missing "links" property');
                        }
                    }
                    break;

                case 'resources':
                    if (!Array.isArray(responseData.data)) {
                        errors.push('Resources data should be an array');
                    } else if (responseData.data.length === 0) {
                        errors.push('Resources data array is empty');
                    } else {
                        const firstItem = responseData.data[0];
                        if (!firstItem.hasOwnProperty('reference')) {
                            errors.push('Resources items missing "reference" property');
                        }
                        if (!firstItem.hasOwnProperty('scripture')) {
                            errors.push('Resources items missing "scripture" property');
                        }
                    }
                    break;
            }

            return {
                valid: errors.length === 0,
                errors: errors
            };
        }

        // Helper functions for bulk testing
        function getTestConfiguration() {
            const config = document.getElementById('testConfig').value;
            const customTests = document.getElementById('customTests').value;
            
            if (config === 'custom') {
                try {
                    return JSON.parse(customTests);
                } catch (error) {
                    throw new Error('Invalid JSON in custom test cases');
                }
            }
            
            return {
                type: config,
                count: config === 'quick' ? 5 : config === 'standard' ? 15 : 30
            };
        }

        function generateTestCases(config) {
            const testCases = [];
            
            if (config.type === 'custom') {
                return config.tests || [];
            }
            
            const baseReferences = [
                'John 3:16',
                'Genesis 1:1',
                'Psalm 23:1',
                'Matthew 28:19-20',
                'Romans 8:28',
                'Titus 1:1-3',
                'Revelation 21:1-4',
                '1 Corinthians 13:4-7',
                'Galatians 5:22-23',
                'Ephesians 6:10-18'
            ];
            
            const languages = ['en', 'es', 'fr', 'de', 'pt'];
            const organizations = ['unfoldingWord', 'door43'];
            
            const endpointTypes = [
                'scripture',
                'translation-notes',
                'translation-questions',
                'translation-words',
                'translation-word-links',
                'resources'
            ];
            
            for (let i = 0; i < config.count; i++) {
                const reference = baseReferences[i % baseReferences.length];
                const language = languages[i % languages.length];
                const organization = organizations[i % organizations.length];
                const endpointType = endpointTypes[i % endpointTypes.length];
                
                let url, method, body, expected;
                
                switch (endpointType) {
                    case 'scripture':
                        url = `/api/fetch-scripture?reference=${encodeURIComponent(reference)}&language=${language}&organization=${organization}`;
                        method = 'GET';
                        expected = { hasData: true, hasReference: true, hasText: true };
                        break;
                    case 'translation-notes':
                        url = `/api/fetch-translation-notes?reference=${encodeURIComponent(reference)}&language=${language}&organization=${organization}`;
                        method = 'GET';
                        expected = { hasData: true, hasReference: true, hasNotes: true };
                        break;
                    case 'translation-questions':
                        url = `/api/fetch-translation-questions?reference=${encodeURIComponent(reference)}&language=${language}&organization=${organization}`;
                        method = 'GET';
                        expected = { hasData: true, hasReference: true, hasQuestions: true };
                        break;
                    case 'translation-words':
                        url = `/api/fetch-translation-words?reference=${encodeURIComponent(reference)}&language=${language}&organization=${organization}`;
                        method = 'GET';
                        expected = { hasData: true, hasTerms: true, hasDefinitions: true };
                        break;
                    case 'translation-word-links':
                        url = `/api/fetch-translation-word-links?reference=${encodeURIComponent(reference)}&language=${language}&organization=${organization}`;
                        method = 'GET';
                        expected = { hasData: true, hasReference: true, hasLinks: true };
                        break;
                    case 'resources':
                        url = `/api/fetch-resources?reference=${encodeURIComponent(reference)}&language=${language}&organization=${organization}`;
                        method = 'GET';
                        expected = { hasData: true, hasReference: true, hasScripture: true };
                        break;
                }
                
                testCases.push({
                    type: endpointType,
                    url,
                    method,
                    body: null,
                    params: { reference, language, organization },
                    expected
                });
            }
            
            return testCases;
        }

        function displayBulkResults(results) {
            const resultsDiv = document.getElementById('bulk-results');
            const successRate = ((results.passed / results.total) * 100).toFixed(1);
            
            let html = `
                <div class="bg-gray-800 rounded-lg p-6 mb-6">
                    <h3 class="text-xl font-bold mb-4">📊 Test Results Summary</h3>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                        <div class="text-center">
                            <div class="text-2xl font-bold text-blue-400">${results.total}</div>
                            <div class="text-sm text-gray-400">Total Tests</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-green-400">${results.passed}</div>
                            <div class="text-sm text-gray-400">Passed</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-red-400">${results.failed}</div>
                            <div class="text-sm text-gray-400">Failed</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-purple-400">${successRate}%</div>
                            <div class="text-sm text-gray-400">Success Rate</div>
                        </div>
                    </div>
                    <div class="text-sm text-gray-400">
                        ⏱️ Total Time: ${results.timing.total}ms | Average: ${(results.timing.total / results.total).toFixed(0)}ms per test
                    </div>
                </div>
            `;
            
            if (results.errors.length > 0) {
                html += `
                    <div class="bg-red-900/20 border border-red-500/30 rounded-lg p-4 mb-6">
                        <h4 class="text-red-400 font-semibold mb-2">❌ Errors (${results.errors.length})</h4>
                        <div class="space-y-2 max-h-60 overflow-y-auto">
                `;
                results.errors.forEach(error => {
                    html += `
                        <div class="text-sm">
                            <span class="text-red-400 font-mono">${error.testCase}</span>
                            <span class="text-gray-400">(${error.type})</span>
                            <div class="text-red-300 ml-4">${error.error}</div>
                        </div>
                    `;
                });
                html += '</div></div>';
            }
            
            html += `
                <div class="bg-gray-800 rounded-lg p-4">
                    <h4 class="text-lg font-semibold mb-3">📋 Test Details</h4>
                    <div class="space-y-2 max-h-96 overflow-y-auto">
            `;
            
            results.details.forEach((detail, index) => {
                const statusIcon = detail.status === 'passed' ? '✅' : '❌';
                const statusColor = detail.status === 'passed' ? 'text-green-400' : 'text-red-400';
                const timingInfo = detail.clientTime ? 
                    `Client: ${detail.clientTime}ms${detail.serverTime ? `, Server: ${detail.serverTime}ms` : ''}` : 
                    'Timing unavailable';
                
                html += `
                    <div class="border border-gray-700 rounded p-3">
                        <div class="flex items-center justify-between mb-2">
                            <span class="${statusColor} font-mono">${statusIcon} ${detail.testCase}</span>
                            <span class="text-sm text-gray-400">${detail.type}</span>
                        </div>
                        <div class="text-sm text-gray-300 mb-1">
                            ${detail.params.reference} (${detail.params.language}/${detail.params.organization})
                        </div>
                        <div class="text-xs text-gray-400">⏱️ ${timingInfo}</div>
                        ${detail.dataCount ? `<div class="text-xs text-gray-400">📊 Data items: ${detail.dataCount}</div>` : ''}
                        ${detail.error ? `<div class="text-xs text-red-400 mt-1">Error: ${detail.error}</div>` : ''}
                    </div>
                `;
            });
            
            html += '</div></div>';
            resultsDiv.innerHTML = html;
            
            // Scroll to results
            resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // Handle test config changes
        document.getElementById('testConfig').addEventListener('change', function() {
            const customTests = document.getElementById('customTests');
            const customLabel = document.querySelector('label[for="customTests"]');
            
            if (this.value === 'custom') {
                customTests.style.display = 'block';
                customLabel.style.display = 'block';
            } else {
                customTests.style.display = 'none';
                customLabel.style.display = 'none';
            }
        });

        // Fetch resources using individual endpoints (existing functionality)
        document.getElementById('fetchForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const reference = formData.get('reference');
            const language = formData.get('language');
            const organization = formData.get('organization');
            const resources = formData.getAll('resources');
            
            console.log('Form submission:', { reference, language, organization, resources });
            
            const resultsDiv = document.getElementById('results');
            const loadingDiv = document.querySelector('.loading');
            
            loadingDiv.style.display = 'block';
            resultsDiv.style.display = 'none';
            resultsDiv.innerHTML = '';
            
            try {
                const results = {};
                const errors = [];

                // Fetch each resource type separately
                // Define all the API calls we need to make
                const apiCalls = [];
                
                if (resources.includes('scripture')) {
                    apiCalls.push({
                        name: 'Scripture',
                        url: \`/api/fetch-scripture?reference=\${encodeURIComponent(reference)}&language=\${language}&organization=\${organization}\`,
                        resultKey: 'scripture',
                        dataKey: 'scripture'
                    });
                }

                if (resources.includes('notes')) {
                    apiCalls.push({
                        name: 'Translation Notes',
                        url: \`/api/fetch-translation-notes?reference=\${encodeURIComponent(reference)}&language=\${language}&organization=\${organization}\`,
                        resultKey: 'translationNotes',
                        dataKey: 'translationNotes'
                    });
                }

                if (resources.includes('questions')) {
                    apiCalls.push({
                        name: 'Translation Questions',
                        url: \`/api/fetch-translation-questions?reference=\${encodeURIComponent(reference)}&language=\${language}&organization=\${organization}\`,
                        resultKey: 'translationQuestions',
                        dataKey: 'translationQuestions'
                    });
                }

                if (resources.includes('words')) {
                    apiCalls.push({
                        name: 'Translation Words',
                        url: \`/api/fetch-translation-words?reference=\${encodeURIComponent(reference)}&language=\${language}&organization=\${organization}\`,
                        resultKey: 'translationWords',
                        dataKey: 'translationWords'
                    });
                }

                if (resources.includes('links')) {
                    apiCalls.push({
                        name: 'Translation Word Links',
                        url: \`/api/fetch-translation-word-links?reference=\${encodeURIComponent(reference)}&language=\${language}&organization=\${organization}\`,
                        resultKey: 'translationWordLinks',
                        dataKey: 'translationWordLinks'
                    });
                }

                // Execute all API calls in parallel
                const apiPromises = apiCalls.map(async (apiCall) => {
                    try {
                        const startTime = Date.now();
                        const response = await fetch(apiCall.url);
                        const data = await response.json();
                        const endTime = Date.now();
                        const responseTime = endTime - startTime;
                        
                        if (response.ok && data[apiCall.dataKey]) {
                            results[apiCall.resultKey] = data[apiCall.dataKey];
                            return { success: true, name: apiCall.name, responseTime, serverTime: data.responseTime };
                        } else {
                            errors.push(\`\${apiCall.name}: \${data.error || 'Not found'} (\${responseTime}ms)\`);
                            return { success: false, name: apiCall.name, responseTime, error: data.error };
                        }
                    } catch (error) {
                        errors.push(\`\${apiCall.name}: \${error.message}\`);
                        return { success: false, name: apiCall.name, error: error.message };
                    }
                });

                const apiResults = await Promise.all(apiPromises);
                
                // Display results
                let html = '<div class="card"><h2>Results</h2>';
                
                // Show stats
                html += '<div class="stats">';
                html += \`<div class="stat">Reference: \${reference}</div>\`;
                html += \`<div class="stat">Language: \${language}</div>\`;
                html += \`<div class="stat">Organization: \${organization}</div>\`;
                html += '</div>';

                // Show timing information
                if (apiResults && apiResults.length > 0) {
                    html += '<div class="timing-info">';
                    html += '<h3>⏱️ Response Times</h3>';
                    html += '<div class="timing-grid">';
                    apiResults.forEach(result => {
                        if (result.success) {
                            const clientTime = result.responseTime;
                            const serverTime = result.serverTime || 'N/A';
                            html += \`<div class="timing-item success">
                                <strong>\${result.name}:</strong> 
                                Client: \${clientTime}ms, Server: \${serverTime}ms
                            </div>\`;
                        } else {
                            html += \`<div class="timing-item error">
                                <strong>\${result.name}:</strong> 
                                Failed (\${result.responseTime || 'N/A'}ms) - \${result.error}
                            </div>\`;
                        }
                    });
                    html += '</div></div>';
                }

                // Show errors if any
                if (errors.length > 0) {
                    html += '<div class="error">';
                    html += '<strong>Errors:</strong><br>';
                    html += errors.join('<br>');
                    html += '</div>';
                }

                // Scripture
                if (results.scripture) {
                    html += '<div class="resource-section">';
                    html += \`<h3>📖 Scripture Text (\${results.scripture.translation})</h3>\`;
                    html += \`<div class="scripture-text">\${results.scripture.text}</div>\`;
                    html += '</div>';
                }
                
                // Translation Notes
                if (results.translationNotes && results.translationNotes.length > 0) {
                    html += '<div class="resource-section">';
                    html += \`<h3>📝 Translation Notes (\${results.translationNotes.length})</h3>\`;
                    results.translationNotes.forEach(note => {
                        html += '<div class="note-item">';
                        html += \`<strong>\${note.reference}</strong><br>\`;
                        if (note.quote) html += \`Quote: "\${note.quote}"<br>\`;
                        html += \`\${note.note}\`;
                        html += '</div>';
                    });
                    html += '</div>';
                }
                
                // Translation Questions
                if (results.translationQuestions && results.translationQuestions.length > 0) {
                    html += '<div class="resource-section">';
                    html += \`<h3>❓ Translation Questions (\${results.translationQuestions.length})</h3>\`;
                    results.translationQuestions.forEach(q => {
                        html += '<div class="question-item">';
                        html += \`<strong>\${q.reference}</strong><br>\`;
                        html += \`Q: \${q.question}<br>\`;
                        if (q.answer) html += \`A: \${q.answer}\`;
                        html += '</div>';
                    });
                    html += '</div>';
                }
                
                // Translation Words
                if (results.translationWords && results.translationWords.length > 0) {
                    html += '<div class="resource-section">';
                    html += \`<h3>🔤 Translation Words (\${results.translationWords.length})</h3>\`;
                    results.translationWords.forEach(word => {
                        html += '<div class="word-item">';
                        html += \`<strong>\${word.term}</strong><br>\`;
                        html += \`\${word.definition}\`;
                        if (word.title) html += \`<br><em>\${word.title}</em>\`;
                        html += '</div>';
                    });
                    html += '</div>';
                }
                
                // Translation Word Links
                if (results.translationWordLinks && results.translationWordLinks.length > 0) {
                    html += '<div class="resource-section">';
                    html += \`<h3>🔗 Translation Word Links (\${results.translationWordLinks.length})</h3>\`;
                    results.translationWordLinks.forEach(link => {
                        html += '<div class="word-item">';
                        html += \`<strong>\${link.word}</strong> (\${link.reference})<br>\`;
                        if (link.origWords) html += \`Original: \${link.origWords}<br>\`;
                        if (link.tags) html += \`Tags: \${link.tags}<br>\`;
                        html += \`ID: \${link.twlid}\`;
                        html += '</div>';
                    });
                    html += '</div>';
                }
                
                // Raw JSON
                html += '<div class="resource-section">';
                html += '<h3>🔧 Raw Response</h3>';
                html += \`<pre>\${JSON.stringify({ results, errors }, null, 2)}</pre>\`;
                html += '</div>';
                
                html += '</div>';
                
                resultsDiv.innerHTML = html;
                resultsDiv.style.display = 'block';
                
                // Scroll to results
                resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
                
            } catch (error) {
                resultsDiv.innerHTML = \`
                    <div class="card">
                        <div class="error">
                            <strong>Error:</strong> \${error.message}
                        </div>
                    </div>
                \`;
                resultsDiv.style.display = 'block';
                
                // Scroll to results
                resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } finally {
                loadingDiv.style.display = 'none';
            }
        });

        // Test endpoints on load
        testEndpoints();
    </script>
</body>
</html>
`;

export const handler: Handler = async (event, context) => {
  return {
    statusCode: 200,
    headers: {
      "Content-Type": "text/html",
      "Cache-Control": "no-cache",
    },
    body: HTML,
  };
};
