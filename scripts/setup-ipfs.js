#!/usr/bin/env node

/**
 * IPFS Setup Script
 * Helps configure IPFS for the translation helps application
 */

import { spawn } from 'child_process';
import { existsSync, writeFileSync } from 'fs';
import { join } from 'path';

const LOG_PREFIX = 'üåç IPFS Setup:';

/**
 * Execute a command and return a promise
 */
function execCommand(command, args = []) {
  return new Promise((resolve, reject) => {
    console.log(`${LOG_PREFIX} Running: ${command} ${args.join(' ')}`);
    
    const child = spawn(command, args, {
      stdio: 'inherit',
      shell: true,
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command failed with exit code ${code}`));
      }
    });

    child.on('error', reject);
  });
}

/**
 * Check if IPFS is installed
 */
async function checkIPFSInstalled() {
  try {
    await execCommand('ipfs', ['version']);
    return true;
  } catch (error) {
    return false;
  }
}

/**
 * Install IPFS (basic instructions)
 */
function printIPFSInstallInstructions() {
  console.log(`
${LOG_PREFIX} IPFS is not installed. Please install it first:

üì• Installation Options:

1. Using official installer (Recommended):
   curl -o ipfs.tar.gz https://dist.ipfs.tech/kubo/v0.24.0/kubo_v0.24.0_linux-amd64.tar.gz
   tar -xzf ipfs.tar.gz
   sudo mv kubo/ipfs /usr/local/bin/

2. Using package manager:
   # Ubuntu/Debian
   sudo apt update && sudo apt install ipfs

   # macOS
   brew install ipfs

   # Windows
   scoop install ipfs

3. Using npm:
   npm install -g ipfs

After installation, run this script again.
`);
}

/**
 * Initialize IPFS repository
 */
async function initializeIPFS() {
  try {
    console.log(`${LOG_PREFIX} Initializing IPFS repository...`);
    await execCommand('ipfs', ['init']);
    console.log(`${LOG_PREFIX} ‚úÖ IPFS repository initialized`);
    return true;
  } catch (error) {
    console.log(`${LOG_PREFIX} IPFS repository already exists or error occurred`);
    return false;
  }
}

/**
 * Configure IPFS for the application
 */
async function configureIPFS() {
  console.log(`${LOG_PREFIX} Configuring IPFS for optimal performance...`);

  const configs = [
    // API and Gateway addresses
    ['config', 'Addresses.API', '/ip4/0.0.0.0/tcp/5001'],
    ['config', 'Addresses.Gateway', '/ip4/0.0.0.0/tcp/8080'],
    
    // CORS settings for web access
    ['config', '--json', 'API.HTTPHeaders.Access-Control-Allow-Origin', '["*"]'],
    ['config', '--json', 'API.HTTPHeaders.Access-Control-Allow-Methods', '["PUT", "POST", "GET"]'],
    ['config', '--json', 'API.HTTPHeaders.Access-Control-Allow-Headers', '["Authorization"]'],
    
    // Performance settings
    ['config', 'Datastore.StorageMax', '50GB'],
    ['config', '--json', 'Datastore.GCPeriod', '"1h"'],
    
    // Enable experimental features
    ['config', '--json', 'Experimental.FilestoreEnabled', 'true'],
    ['config', '--json', 'Experimental.UrlstoreEnabled', 'true'],
    
    // Swarm settings
    ['config', '--json', 'Addresses.Swarm', '["/ip4/0.0.0.0/tcp/4001", "/ip6/::/tcp/4001"]'],
  ];

  for (const config of configs) {
    try {
      await execCommand('ipfs', config);
      console.log(`${LOG_PREFIX} ‚úÖ Set ${config[1]}`);
    } catch (error) {
      console.log(`${LOG_PREFIX} ‚ö†Ô∏è  Failed to set ${config[1]}: ${error.message}`);
    }
  }
}

/**
 * Create environment file with IPFS settings
 */
function createEnvironmentFile() {
  const envPath = join(process.cwd(), '.env.ipfs');
  
  if (existsSync(envPath)) {
    console.log(`${LOG_PREFIX} Environment file already exists: ${envPath}`);
    return;
  }

  const envContent = `# IPFS Configuration for Translation Helps
# Generated by setup-ipfs.js

# Local IPFS Configuration
IPFS_LOCAL_ENABLED=true
IPFS_API_URL=http://localhost:5001
IPFS_GATEWAY_URL=http://localhost:8080
IPFS_TIMEOUT=30000

# Cloudflare IPFS Configuration (Configure these for production)
IPFS_CLOUDFLARE_ENABLED=false
IPFS_CLOUDFLARE_GATEWAY=https://cloudflare-ipfs.com
CLOUDFLARE_API_TOKEN=your-cloudflare-token
IPFS_CLOUDFLARE_TIMEOUT=30000

# Cloudflare R2 Configuration (Configure these for production)
CLOUDFLARE_R2_ENABLED=false
CLOUDFLARE_ACCOUNT_ID=your-account-id
CLOUDFLARE_R2_ACCESS_KEY_ID=your-access-key
CLOUDFLARE_R2_SECRET_ACCESS_KEY=your-secret-key
CLOUDFLARE_R2_BUCKET_NAME=ipfs-cache
CLOUDFLARE_R2_REGION=auto

# Cloudflare KV Configuration (Configure these for production)
CLOUDFLARE_KV_ENABLED=false
CLOUDFLARE_KV_NAMESPACE_ID=your-namespace-id

# Pinning Services (Optional - configure for permanent archival)
PINATA_ENABLED=false
PINATA_API_KEY=your-pinata-api-key
PINATA_SECRET_KEY=your-pinata-secret-key

WEB3_STORAGE_ENABLED=false
WEB3_STORAGE_TOKEN=your-web3-storage-token

# Cache Configuration
IPFS_MEMORY_CACHE=true
IPFS_PERSISTENCE_LEVEL=local
IPFS_COMPRESSION=true
IPFS_ENCRYPTION=false

# Gateway Configuration
IPFS_PRIMARY_GATEWAY=https://ipfs.io
IPFS_GATEWAY_TIMEOUT=15000
IPFS_GATEWAY_RETRIES=3

# Edge Caching (Cloudflare only)
CLOUDFLARE_EDGE_CACHE=false
CLOUDFLARE_EDGE_TTL=3600
CLOUDFLARE_EDGE_SWR=86400
`;

  writeFileSync(envPath, envContent);
  console.log(`${LOG_PREFIX} ‚úÖ Created environment file: ${envPath}`);
  console.log(`${LOG_PREFIX} üìù Edit this file to configure your IPFS settings`);
}

/**
 * Test IPFS configuration
 */
async function testIPFSConfiguration() {
  console.log(`${LOG_PREFIX} Testing IPFS configuration...`);

  try {
    // Test basic functionality
    await execCommand('ipfs', ['swarm', 'peers']);
    console.log(`${LOG_PREFIX} ‚úÖ IPFS is connected to peers`);

    // Test API endpoint
    const testResponse = await fetch('http://localhost:5001/api/v0/version');
    if (testResponse.ok) {
      const version = await testResponse.json();
      console.log(`${LOG_PREFIX} ‚úÖ IPFS API is accessible (version: ${version.Version})`);
    } else {
      console.log(`${LOG_PREFIX} ‚ö†Ô∏è  IPFS API is not responding`);
    }

    // Test gateway
    const gatewayResponse = await fetch('http://localhost:8080/ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG', {
      method: 'HEAD',
    });
    if (gatewayResponse.ok) {
      console.log(`${LOG_PREFIX} ‚úÖ IPFS Gateway is accessible`);
    } else {
      console.log(`${LOG_PREFIX} ‚ö†Ô∏è  IPFS Gateway is not responding`);
    }

  } catch (error) {
    console.log(`${LOG_PREFIX} ‚ö†Ô∏è  Error testing IPFS: ${error.message}`);
  }
}

/**
 * Print next steps
 */
function printNextSteps() {
  console.log(`
${LOG_PREFIX} üéâ Setup complete! Next steps:

1. üîß Start IPFS daemon:
   ipfs daemon

2. üìù Configure your application:
   - Copy .env.ipfs to .env
   - Update Cloudflare settings for production
   - Configure pinning services if needed

3. üß™ Test the integration:
   npm run test:ipfs

4. üîç Monitor IPFS health:
   npm run ipfs:health

5. üìö Read the implementation guide:
   docs/IPFS_IMPLEMENTATION_GUIDE.md

Happy caching! üöÄ
`);
}

/**
 * Main setup function
 */
async function main() {
  console.log(`${LOG_PREFIX} Setting up IPFS for Translation Helps...`);

  // Check if IPFS is installed
  if (!(await checkIPFSInstalled())) {
    printIPFSInstallInstructions();
    process.exit(1);
  }

  // Initialize IPFS if needed
  await initializeIPFS();

  // Configure IPFS
  await configureIPFS();

  // Create environment file
  createEnvironmentFile();

  // Test configuration (if daemon is running)
  try {
    await testIPFSConfiguration();
  } catch (error) {
    console.log(`${LOG_PREFIX} ‚ö†Ô∏è  Cannot test configuration (daemon not running?)`);
    console.log(`${LOG_PREFIX} Start IPFS daemon with: ipfs daemon`);
  }

  // Print next steps
  printNextSteps();
}

// Run setup if this script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error(`${LOG_PREFIX} ‚ùå Setup failed:`, error.message);
    process.exit(1);
  });
}

export { main as setupIPFS };