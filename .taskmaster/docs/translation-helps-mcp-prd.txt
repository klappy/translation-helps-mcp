# Translation Helps MCP Server - Product Requirements Document

## Project Overview
Build a Model Context Protocol (MCP) server that provides Bible translation resources through Netlify Functions, enabling AI assistants and applications to fetch scripture, translation notes, questions, and other biblical resources for any language and organization.

## Goals
1. Create a serverless MCP server deployed on Netlify
2. Provide clean, LLM-optimized Bible text extraction from USFM format
3. Support multiple organizations and languages dynamically
4. Implement efficient caching and performance optimization
5. Enable easy integration with AI assistants via MCP protocol

## Technical Requirements

### Core Technologies
- Node.js 18+ with TypeScript
- Netlify Functions for serverless deployment
- MCP SDK for protocol implementation
- USFM parser for text extraction

### API Endpoints (Netlify Functions)
1. **health** - Health check endpoint
2. **fetch-resources** - Aggregate all resources for a Bible reference
3. **get-languages** - List available languages per organization
4. **get-organizations** - List all content organizations
5. **extract-references** - Parse Bible references from text

### MCP Tools
1. **fetch-resources** - Main tool for resource retrieval
2. **get-languages** - Language discovery tool
3. **get-organizations** - Organization discovery tool
4. **extract-references** - Reference parsing tool

## Functional Requirements

### 1. Resource Fetching
- Fetch scripture text from DCS (Door43 Content Service)
- Retrieve translation notes, questions, and word definitions
- Support dynamic organization and language selection
- Use ingredients array for file paths (never hardcode)
- Handle missing resources gracefully

### 2. USFM Text Processing
- Extract clean text from USFM markup
- Remove alignment markers and metadata
- Preserve punctuation for accurate quotation
- Support verse, chapter, and range extraction
- Implement fallback extraction methods

### 3. Caching System
- Multi-level cache architecture
- Request deduplication to prevent API hammering
- Configurable TTLs per resource type
- Stale cache fallback for resilience
- Memory-efficient cache management

### 4. Error Handling
- Structured error responses with codes
- Graceful degradation with partial responses
- Meaningful error messages for debugging
- Fallback to cached data when available

### 5. Performance Optimization
- Parallel resource fetching
- Efficient USFM parsing
- Response compression
- Edge deployment via Netlify

## Data Sources
- DCS Catalog API: https://git.door43.org/api/v1/catalog
- Resource repositories on git.door43.org
- Public domain Bible translations and resources

## Implementation Phases

### Phase 1: Core Infrastructure
- Set up project structure
- Configure TypeScript and build system
- Implement basic Netlify Functions
- Create health check endpoint

### Phase 2: DCS Integration
- Implement DCS API client
- Create catalog service for organizations/languages
- Build resource fetching logic
- Add caching layer

### Phase 3: USFM Processing
- Implement USFM text extractor
- Create reference parser
- Build verse/chapter extraction
- Add quality validation

### Phase 4: MCP Implementation
- Set up MCP server structure
- Implement MCP tools
- Create tool handlers
- Add MCP configuration

### Phase 5: Testing & Optimization
- Write comprehensive tests
- Optimize performance
- Add monitoring/logging
- Create documentation

### Phase 6: Deployment
- Configure Netlify deployment
- Set up CI/CD pipeline
- Deploy to production
- Monitor and iterate

## Success Criteria
1. All endpoints return correct data within 2 seconds
2. USFM extraction produces clean, quotable text
3. Cache hit rate above 80% in production
4. Zero hardcoded file paths or resource names
5. Successful integration with AI assistants via MCP

## Dependencies
- DCS API availability and stability
- Netlify Functions runtime
- MCP protocol specification
- Node.js ecosystem packages

## Constraints
- Must work within Netlify Functions limits
- All data sources are public (no auth required)
- Must handle various USFM formats
- Need to support multiple natural languages

## Future Enhancements
- WebSocket support for real-time updates
- Batch operations for multiple references
- Search functionality across resources
- Offline support capabilities
- Analytics dashboard 