# Translation Helps MCP - 2025 Refactor PRD

## Executive Summary
This refactor focuses on simplifying translation-helps-mcp to its core mission: providing reliable access to unfoldingWord translation resources via MCP. All experimental features will be moved to a separate lab environment.

## Core Mission
Provide a rock-solid MCP server that gives AI assistants access to:
- Scripture (ULT/UST/GLT/GST) with clean text extraction from USFM
- Translation Notes with reference filtering
- Translation Words with full article assembly and browsable ToC
- Translation Words Links as the bridge between verses and tW articles
- Translation Questions for comprehension checking
- Translation Academy articles with browsable ToC and direct linking from tN
- Language/resource discovery with proper book availability per resource

## Key Principles
1. **Simplicity First**: If it's not essential, it doesn't belong in core
2. **Configuration-Driven**: One config to rule all endpoints
3. **Single Source of Truth**: MCP Tools page is the only UI interface
4. **Documentation = Implementation**: They must match 1:1
5. **Core vs Lab**: Clear separation between battle-tested and experimental
6. **Data Transformation**: Shape and filter uW data for practical use while maintaining fidelity

## Architecture Goals

### Phase 1: Documentation Cleanup (Week 1)
- Archive outdated docs to `/docs/archive/`
- Consolidate overlapping guides into single sources
- Remove empty/aspirational documentation
- Update all dates to current (no more time travel from 2023)
- Create clear resource data shape documentation

### Phase 2: UI Simplification (Week 1-2)
- Remove `/api-docs`, `/test`, `/api-test`, `/developer-portal` pages
- Remove pricing, sverdle demo pages
- Focus 100% on MCP Tools page as primary interface
- Add experimental lab section to MCP Tools (lower section/tab)

### Phase 3: Code Audit & Cleanup (Week 2)
- Remove deprecated code and unused endpoints
- Identify and remove duplicate functionality
- Clean up old implementations that confuse new features
- Fix all hardcoded dates and test data
- Ensure no interactive commands that hang

### Phase 4: Endpoint Configuration System (Week 3)
Create a configuration-driven system that:
- Defines all endpoints in one place
- Auto-generates routes and MCP tools
- Ensures UI/API/MCP consistency
- Handles transformations uniformly

### Phase 5: Core Endpoint Implementation (Week 3-4)
**Scripture Endpoints**:
- `/fetch-scripture` - Clean text from USFM with verse/range/chapter support
- `/fetch-ult-scripture` - Literal translation specific
- `/fetch-ust-scripture` - Simplified translation specific

**Translation Helps**:
- `/fetch-translation-notes` - Filtered by reference
- `/fetch-translation-words` - Full article assembly (title + parts)
- `/fetch-translation-word-links` - Bridge from verses to tW articles
- `/fetch-translation-questions` - Comprehension questions
- `/fetch-translation-academy` - Training articles

**Discovery Endpoints**:
- `/get-languages` - Available languages with metadata
- `/list-available-resources` - Resources per language
- `/get-available-books` - Books available per resource (with proper filtering)
- `/browse-translation-words` - ToC for tW articles
- `/browse-translation-academy` - ToC for tA articles

**Context Endpoints**:
- `/get-context` - Combined resource fetching for a reference
- `/get-words-for-reference` - All tW articles for words in a verse

### Phase 6: MCP Tools Page Enhancement (Week 4)
- Implement parameter editor with type validation
- Add performance metrics display
- Show cache hit/miss statistics
- Display full response with syntax highlighting
- Add experimental lab section (separate tab/section)
- Ensure consistent UI/UX across all endpoints

### Phase 7: Experimental Lab Setup (Week 5)
Move to separate section:
- AI-powered features (summarizer, quality checker)
- Advanced caching strategies
- Smart endpoint inference (future)
- Resource recommendations
- Automated content ingestion

### Phase 8: Testing & Documentation (Week 5-6)
- Real data validation tests (not just 200 OK)
- Performance benchmarks for typical queries
- Update all documentation to match implementation
- Create migration guide for breaking changes
- Final cleanup and deployment prep

### Phase 9: AI Assistant Chat Interface (Week 6-7)
**The Paramount Showcase - "Taste and See" Experience**

Build the reference implementation that demonstrates the value of the entire system:

**Core Features**:
- Clean, first-class chat interface showing AI + Bible resources
- Sacred text constraints (scripture quoted verbatim, no interpretation)
- X-ray view showing tool usage with expandable details
- Performance metrics displayed elegantly
- Progressive disclosure (simple → detailed on demand)

**Sacred Text Principles**:
- Scripture MUST be quoted character-for-character verbatim
- NO interpretation or trained knowledge about the Bible
- All responses must cite source resources
- Creative rewording allowed for notes/articles (not scripture)
- Every claim must be directly backed by fetched resources

**Transparency Features**:
- Public system prompt endpoint (/api/system-prompt)
- Methodology documentation endpoint
- Version history for prompt evolution
- Open collaboration on prompt improvements
- Full constraint explanations

**UI/UX Requirements**:
- Apple-like simplicity with power underneath
- Conversation-first design
- Subtle tool usage indicators (e.g., "3 tools • 284ms")
- Expandable reasoning traces
- Clean, uncluttered, mobile-responsive

**Implementation Details**:
- System prompt enforcing constraints
- Response validation ensuring verbatim scripture
- Source attribution in every response
- No hallucination detection
- Community contribution process

This is THE feature that demonstrates value to partners and shows them exactly how to integrate Bible translation resources with AI while maintaining scriptural integrity.

## Success Criteria
1. Core endpoints return accurate uW data with appropriate transformations
2. All endpoints respond in <500ms for typical queries
3. MCP Tools page provides complete visibility into all functionality
4. Documentation exactly matches implementation
5. Clear separation between core and experimental features
6. No more "time travel" dates or bogus test data
7. Tests validate actual resource content, not just response status

## 6-Month Vision
- Core endpoints are industry standard for uW resource access
- Experimental lab has produced 2-3 features ready for core
- Smart endpoints can infer user intent for resource selection
- Offline capability via repository downloads
- Trusted by major LLM implementations for Bible translation

## Migration Notes
- This is a breaking change from current implementation
- All existing endpoints will be audited and potentially modified
- Clear communication needed for any consumers of current API
- Experimental features remain available but clearly separated 