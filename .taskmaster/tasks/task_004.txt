# Task ID: 4
# Title: Design Endpoint Configuration System
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create a configuration-driven system to prevent copy-paste errors and ensure consistency
# Details:
Design EndpointConfig that handles:
- Consistent parameter naming (reference, language, resource)
- Resource-specific response shapes
- Shared shapes for same resource types
- DCS API integration details
- Transformation logic (USFM to text, TSV parsing, etc.)
- Real data examples
- Performance metrics
- Error handling

System should allow minimal code changes for new endpoints

# Test Strategy:
Configuration system handles all core endpoints, prevents UI/API/MCP inconsistencies

# Subtasks:
## 1. Design EndpointConfig Interface [pending]
### Dependencies: None
### Description: Create TypeScript interface for endpoint configuration
### Details:
Create src/config/EndpointConfig.ts:
```typescript
interface EndpointConfig {
  name: string;
  path: string;
  category: 'core' | 'experimental';
  params: {
    reference?: ParamConfig;
    language?: ParamConfig;
    resource?: ParamConfig;
    [key: string]: ParamConfig;
  };
  dataSource: {
    type: 'dcs' | 'computed';
    transformation?: 'usfm-to-text' | 'tsv-parse' | 'markdown-assemble';
  };
  responseShape: ResourceShape;
  examples: RealDataExample[];
}
```

## 2. Create Response Shape Registry [pending]
### Dependencies: 4.1
### Description: Define consistent shapes for resource types
### Details:
Define shapes for:
- Scripture (text, reference, version)
- Translation Notes (notes array with reference filtering)
- Translation Words (assembled articles)
- Translation Words Links (verse-to-word mappings)
- Discovery endpoints (lists with metadata)
Ensure same resource type uses same shape across endpoints

## 3. Build Configuration Registry [pending]
### Dependencies: 4.2
### Description: Create system to manage and validate configs
### Details:
Create src/config/EndpointRegistry.ts:
- Central registry for all configs
- Validation for required fields
- Type checking for params
- Prevent duplicate paths
- Export for use across app

## 4. Create Route Generator [pending]
### Dependencies: 4.3
### Description: Auto-generate API routes from configurations
### Details:
Build system to:
- Read endpoint configs
- Generate consistent route handlers
- Apply transformations (USFM to text, etc.)
- Handle errors uniformly
- Add performance tracking
- Return consistent response format

## 5. Create UI Generator for MCP Tools [pending]
### Dependencies: 4.3
### Description: Generate consistent UI from configurations
### Details:
Generate for MCP Tools page:
- Parameter inputs with proper types
- Real data examples
- Response displays
- Performance metrics
- Error states
- Loading states
All from configuration

