{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up project infrastructure",
        "description": "Initialize the project with TypeScript, build system, and basic Netlify Functions structure",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Create the foundational project structure including package.json, tsconfig.json, Netlify configuration, and basic directory structure for the MCP server implementation.",
        "testStrategy": "Verify build process works, TypeScript compiles without errors, and basic Netlify dev server runs locally",
        "subtasks": [
          {
            "id": 1,
            "title": "Update package.json with required dependencies",
            "description": "Add TypeScript, Netlify CLI, MCP SDK, and other required packages",
            "details": "Install and configure: typescript, @types/node, @netlify/functions, @modelcontextprotocol/sdk, tsx for development, and other necessary dependencies",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Create TypeScript configuration",
            "description": "Set up tsconfig.json with proper settings for Node.js and Netlify Functions",
            "details": "Configure TypeScript for ES2022, Node.js module resolution, strict type checking, and output to dist directory",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "Set up Netlify configuration",
            "description": "Create netlify.toml with Functions configuration and build settings",
            "details": "Configure Netlify Functions directory, Node.js version, build commands, and environment settings in netlify.toml",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "Create project directory structure",
            "description": "Set up the folder structure for src, tests, and Netlify functions",
            "details": "Create directories: src/, src/services/, src/utils/, src/types/, netlify/functions/, tests/, and update .gitignore",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Create health check endpoint",
        "description": "Implement a basic health check Netlify Function to verify deployment",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Create a simple health check endpoint at /api/health that returns status, version, and timestamp. This will verify Netlify Functions are working correctly.",
        "testStrategy": "Test locally with netlify dev, then deploy and verify the endpoint returns 200 OK with expected JSON response"
      },
      {
        "id": 3,
        "title": "Implement DCS API client",
        "description": "Create a client service for interacting with the Door43 Content Service API",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Build a robust API client that handles all DCS catalog endpoints including /owners, /languages, and resource fetching. Include proper error handling and response parsing.",
        "testStrategy": "Unit test each API method with mocked responses, integration test against real DCS API endpoints",
        "subtasks": [
          {
            "id": 1,
            "title": "Create DCS API client base class",
            "description": "Design and implement the core DCS API client class with base configuration, headers, and common request handling",
            "details": "Create a TypeScript class that handles base URL configuration, common headers, and basic HTTP request methods for the Door43 Content Service API",
            "status": "in-progress",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Implement catalog endpoints methods",
            "description": "Add methods for fetching organizations, languages, and resources from DCS catalog API",
            "details": "Implement getOwners(), getLanguages(), getResources() methods with proper TypeScript interfaces for API responses",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Add error handling and retries",
            "description": "Implement robust error handling with retry logic for network failures and API errors",
            "details": "Add exponential backoff retry mechanism, proper error types, and logging for debugging API issues",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Create TypeScript interfaces for API responses",
            "description": "Define comprehensive TypeScript interfaces for all DCS API response types",
            "details": "Create interfaces for Owner, Language, Resource, and other API response objects with proper typing",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Add unit tests for DCS client",
            "description": "Write comprehensive unit tests for all DCS API client methods",
            "details": "Create test suites with mocked HTTP responses to test each API method, error scenarios, and retry logic",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Build catalog service",
        "description": "Create service layer for fetching organizations, languages, and resources from DCS",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "Implement catalogService with methods for getOrganizations(), getLanguages(org), and getResources(org, lang). Use proper TypeScript interfaces for all data structures.",
        "testStrategy": "Test with known organizations like unfoldingWord, verify correct data transformation and error handling"
      },
      {
        "id": 5,
        "title": "Implement caching system",
        "description": "Build multi-level cache with request deduplication",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "Create CacheManager class with memory cache, TTL management, and request deduplication to prevent API hammering. Different TTLs for different resource types.",
        "testStrategy": "Test cache hits/misses, TTL expiration, concurrent request deduplication, memory usage"
      },
      {
        "id": 6,
        "title": "Create USFM text extractor",
        "description": "Build system to extract clean text from USFM format for LLM consumption",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Implement unified server-side USFM extraction using regex patterns. Remove alignment markers, word attributes, and all USFM markup while preserving punctuation.",
        "testStrategy": "Test with various USFM samples including aligned text, verify clean output matches expected format"
      },
      {
        "id": 7,
        "title": "Build reference parser",
        "description": "Create parser for various Bible reference formats",
        "status": "pending",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Parse references like 'John 3:16', 'Gen 1:1-5', '1 Corinthians 13:4-7' into structured format with book, chapter, verse. Handle multiple languages and book name variations.",
        "testStrategy": "Test with comprehensive list of reference formats, edge cases, and invalid inputs"
      },
      {
        "id": 8,
        "title": "Implement resource aggregator",
        "description": "Create service to fetch and combine all resource types for a reference",
        "status": "pending",
        "dependencies": [
          4,
          5,
          6
        ],
        "priority": "high",
        "details": "Build ResourceAggregator that fetches scripture, notes, questions, and words in parallel. Uses caching and handles partial failures gracefully.",
        "testStrategy": "Test parallel fetching, partial failure scenarios, response aggregation format"
      },
      {
        "id": 9,
        "title": "Create Netlify Functions",
        "description": "Implement all API endpoints as Netlify Functions",
        "status": "pending",
        "dependencies": [
          2,
          8
        ],
        "priority": "high",
        "details": "Create functions for fetch-resources, get-languages, get-organizations. Proper error handling, CORS headers, and response formatting.",
        "testStrategy": "Test each function locally and deployed, verify error responses and CORS headers"
      },
      {
        "id": 10,
        "title": "Set up MCP server structure",
        "description": "Implement the MCP server with tool definitions and handlers",
        "status": "pending",
        "dependencies": [
          9
        ],
        "priority": "high",
        "details": "Create MCP server using the SDK, define tools for fetch-resources, get-languages, etc. Implement proper tool schemas and response formatting.",
        "testStrategy": "Test MCP tools with mock client, verify tool discovery and execution"
      },
      {
        "id": 11,
        "title": "Write comprehensive tests",
        "description": "Create unit and integration tests for all components",
        "status": "pending",
        "dependencies": [
          10
        ],
        "priority": "medium",
        "details": "Write tests for all services, endpoints, and edge cases. Include performance tests and load testing for cache system.",
        "testStrategy": "Achieve 80%+ code coverage, all tests pass in CI environment"
      },
      {
        "id": 12,
        "title": "Configure deployment and monitoring",
        "description": "Set up production deployment with CI/CD and monitoring",
        "status": "pending",
        "dependencies": [
          11
        ],
        "priority": "medium",
        "details": "Configure Netlify deployment, GitHub Actions CI/CD, error tracking, and performance monitoring. Create deployment documentation.",
        "testStrategy": "Successful automated deployment, monitoring dashboards working, alerts configured"
      },
      {
        "id": 13,
        "title": "Implement ingredients-based file resolution",
        "description": "Create a robust file path resolution system using the ingredients array from catalog API",
        "details": "Files don't follow predictable naming! They use numbered prefixes like '57-TIT.usfm'. Must check ingredients array first, then fall back to standard naming conventions. This is CRITICAL for the entire system to work.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Handle verse bridges and special references",
        "description": "Implement support for verse bridges (4-5), chapter intros (1:intro), and book intros (front:intro)",
        "details": "USFM contains verse bridges like '\\v 4-5' that need special regex handling. Also need to handle chapter introduction notes (1:intro) and book introduction notes (front:intro). This is more complex than simple verse extraction.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          6
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Create resource-specific TSV parsers",
        "description": "Build parsers for each resource type's unique TSV column structure",
        "details": "Each resource type has different TSV columns: Translation Notes use Note/Quote/Occurrence/Reference, Translation Questions use Reference/ID/Tags/Quote/Question/Response. Need type-safe parsers for each.",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Study Translation Helps Wisdom Documentation",
        "description": "Read and understand all three wisdom documents that contain 123 documents worth of debugging discoveries",
        "details": "⚠️ MANDATORY FIRST STEP - DO NOT SKIP ⚠️\n\nRequired reading IN THIS ORDER:\n\n1. **docs/CRITICAL_TRANSLATION_HELPS_LEARNINGS_FOR_MCP.md** (30 min)\n   - The most critical patterns and discoveries\n   - If you read only one doc, read this\n   - Contains the \"ingredients array\" discovery\n\n2. **docs/COMPREHENSIVE_TRANSLATION_HELPS_PATTERNS.md** (45 min)\n   - Complete implementation patterns\n   - Multi-resource integration details\n   - Performance optimization strategies\n\n3. **docs/TRANSLATION_HELPS_DISTILLED_WISDOM.md** (1 hour)\n   - Distilled wisdom from ALL 123 documents\n   - Complete pattern library\n   - Critical warnings and common pitfalls\n\nThese documents represent WEEKS of debugging work. Every pattern, every warning, every \"don't do this\" comes from painful trial and error.\n\nKey discoveries you'll learn:\n- Why manifests add 3-9 seconds of latency\n- The ingredients array pattern (THE most critical discovery)\n- Why loading verses (10KB) beats loading chapters (420KB)\n- How to handle unpredictable file names (01-GEN.tsv vs tn_GEN.tsv)\n- Cross-organization resource support\n- USFM extraction patterns that work everywhere\n- Caching strategies for 90% performance improvement\n- LLM integration requirements for accuracy\n\nAfter reading, you should understand:\n- Why we NEVER use manifests\n- How to use the ingredients array for file resolution\n- The simple verse-loading pattern\n- Multi-resource aggregation with parallel loading\n- Proper error handling with graceful degradation\n- Theme system with CSS variables\n- Git workflow requirements\n\nThis is not optional reading - it's the foundation for everything else.",
        "testStrategy": "Verify understanding by:\n1. Explaining the ingredients array pattern\n2. Describing why manifests are problematic\n3. Listing the key API endpoints for DCS catalog\n4. Explaining the verse vs chapter loading trade-off",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-16T23:38:38.925Z",
      "updated": "2025-07-17T03:07:33.822Z",
      "description": "Tasks for master context"
    }
  }
}